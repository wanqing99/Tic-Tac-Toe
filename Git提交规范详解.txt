feat: 新功能
fix: bug修复
docs: 仅文档更改
style: 不影响代码含义的更改（空白、格式设置、缺失 分号等）
refactor: 既不修复bug也不添加特性的代码更改
perf: 改进性能的代码更改
test: 添加缺少的测试或更正现有测试
chore: 对构建过程或辅助工具和库（如文档）的更改




在团队协作开发中，Git作为版本控制系统，其提交信息的清晰性和一致性至关重要。通过定义特定的提交类型和格式，我们可以更好地追踪项目历史，提高代码审查效率，并方便生成高质量的变更日志。以下是几种常见的Git提交类型及其含义：

1. feat: 新功能增加

git commit -m "feat: 增加用户注册功能"
1
这个类型用于标记对项目新功能的添加。例如，当你完成一个用户注册模块时，就可以使用feat来标识这次提交。

2. fix: 修复问题/BUG

git commit -m "fix: 修复登录接口在特殊情况下返回错误的问题"
1
当你的改动旨在解决某个已知问题或BUG时，应使用fix标签。

3. style: 代码风格相关无影响运行结果的

git commit -m "style: 优化代码格式并遵循PEP8规范"
1
对于纯粹改进代码风格，但不影响程序实际行为的修改，使用style标签。

4. perf: 优化/性能提升

git commit -m "perf: 优化查询逻辑，提升数据检索速度30%"
1
如果你的提交提升了代码执行效率或者系统性能，那么使用perf进行标注。

5. refactor: 重构

git commit -m "refactor: 对用户管理模块进行重构，提高可读性"
1
在不改变外部行为的前提下改善内部结构的修改，应使用refactor。

6. revert: 撤销修改

git commit -m "revert: 撤销上一次关于支付逻辑的改动"
1
使用revert标签回滚到以前的提交状态。

7. test: 测试相关

git commit -m "test: 添加用户注册功能的单元测试用例"
1
任何与测试相关的改动，包括添加、更新或删除测试用例，都应使用test标签。

8. docs: 文档/注释

git commit -m "docs: 更新README文档，详细描述项目安装步骤"
1
所有涉及文档、注释等非代码部分的修改，应使用docs。

9. chore: 依赖更新/脚手架配置修改等

git commit -m "chore: 升级React到最新版本，同步package.json"
1
对于构建过程或辅助工具的变动（如依赖升级、脚本更改等），使用chore。

10. workflow: 工作流改进

git commit -m "workflow: 调整CI/CD流程，自动化部署上线"
1
改进项目工作流、持续集成或持续部署等方面的改动，使用workflow。

11. ci: 持续集成

git commit -m "ci: 配置Travis CI，实现自动化单元测试"
1
针对持续集成系统的配置修改或新增，使用ci。

12. types: 类型定义文件更改

git commit -m "types: 更新user类型定义，新增address字段"
1
如果修改了项目中的类型定义文件（如TypeScript项目中的.d.ts文件），使用types标签。

13. wip: 开发中

git commit -m "wip: 开始开发订单管理模块，尚处于开发阶段"
1
当功能尚未完全实现，正处于开发过程中时，可以使用wip表示“Work in Progress”。

以上就是一些常用的Git提交类型，根据实际情况，你还可以自定义其他有意义的提交类型以适应项目的需要。良好的提交习惯有助于提升团队协作效率，让项目维护更加有序。
————————————————

                            版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。
                        
原文链接：https://blog.csdn.net/qq_29752857/article/details/135385886